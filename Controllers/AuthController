using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using AuthAPI.Models;

namespace AuthAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        // Simule une base de données utilisateur
        private static List<User> users = new List<User>
        {
            new User { Username = "testuser", Password = "password123", Role = "Admin" }
        };

        private readonly IConfiguration _configuration;

        public AuthController(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        // Endpoint pour l'inscription
        [HttpPost("register")]
        public IActionResult Register(User user)
        {
            if (users.Any(u => u.Username == user.Username))
            {
                return BadRequest("L'utilisateur existe déjà");
            }

            users.Add(user);
            return Ok("Utilisateur enregistré avec succès");
        }

        // Endpoint pour la connexion (génère le token JWT)
        [HttpPost("login")]
        public IActionResult Login(User loginRequest)
        {
            var user = users.FirstOrDefault(u => u.Username == loginRequest.Username && u.Password == loginRequest.Password);
            if (user == null)
            {
                return Unauthorized("Nom d'utilisateur ou mot de passe incorrect");
            }

            // Générer le token JWT
            var token = GenerateJwtToken(user);
            return Ok(new { token });
        }

        // Méthode pour générer un JWT
        private string GenerateJwtToken(User user)
        {
            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.Username),
                new Claim(ClaimTypes.Role, user.Role)
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims: claims,
                expires: DateTime.Now.AddMinutes(double.Parse(_configuration["Jwt:ExpiryInMinutes"])),
                signingCredentials: creds);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
